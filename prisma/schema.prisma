// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos financeiros
  revenues Revenue[]
  expenses Expense[]

  // Relacionamentos de vendas e estoque
  sales Sale[]
  stockMovements StockMovement[]
  
  // Relacionamentos de tasks
  assignedTasks Task[] @relation("TaskAssignee")
  createdTasks Task[] @relation("TaskCreator")

  // Comissões
  commissions Commission[]

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  cnpj        String?  @unique
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos existentes
  users      User[]
  revenues   Revenue[]
  expenses   Expense[]
  categories Category[]

  // Novos relacionamentos
  clients    Client[]
  products   Product[]
  sales      Sale[]
  tasks      Task[]
  commissions Commission[]

  @@map("companies")
}

model Category {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        CategoryType
  color       String?     @default("#3B82F6")
  companyId   String
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos existentes
  revenues Revenue[]
  expenses Expense[]

  // Novos relacionamentos
  products Product[]

  @@map("categories")
}

model Revenue {
  id          String   @id @default(cuid())
  description String
  amount      Decimal  @db.Decimal(12, 2)
  date        DateTime
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  notes       String?
  attachment  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("revenues")
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Decimal  @db.Decimal(12, 2)
  date        DateTime
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  notes       String?
  attachment  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

// NOVOS MODELOS PARA GESTÃO COMPLETA

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  cpf       String?  @unique
  cnpj      String?  @unique
  address   String?
  city      String?
  state     String?
  zipCode   String?
  notes     String?
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  sales Sale[]

  @@map("clients")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  model       String?
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  minStock    Int      @default(0)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  saleItems SaleItem[]
  stockMovements StockMovement[]

  @@map("products")
}

model Sale {
  id              String   @id @default(cuid())
  clientId        String?
  client          Client?  @relation(fields: [clientId], references: [id])
  clientName      String   // Para vendas sem cliente cadastrado
  total           Decimal  @db.Decimal(12, 2)
  discount        Decimal? @db.Decimal(10, 2) @default(0)
  finalTotal      Decimal  @db.Decimal(12, 2)
  paymentMethod   PaymentMethod
  notes           String?
  sellerId        String   // Funcionário responsável pela venda
  seller          User     @relation(fields: [sellerId], references: [id])
  companyId       String
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  items SaleItem[]
  commissions Commission[]

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  
  // Para produtos/serviços não cadastrados
  itemName    String
  description String?
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  
  createdAt DateTime @default(now())

  @@map("sale_items")
}

model StockMovement {
  id          String        @id @default(cuid())
  productId   String
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  type        MovementType
  quantity    Int
  reason      String
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())

  @@map("stock_movements")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  assigneeId  String?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creatorId   String
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  startedAt   DateTime?
  completedAt DateTime?
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tasks")
}

model Commission {
  id          String  @id @default(cuid())
  saleId      String
  sale        Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  userId      String  // Funcionário que recebe a comissão
  user        User    @relation(fields: [userId], references: [id])
  percentage  Decimal @db.Decimal(5, 2) // Ex: 5.50 para 5.5%
  amount      Decimal @db.Decimal(10, 2)
  companyId   String
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("commissions")
}

enum Role {
  USER        // Funcionário comum
  CASHIER     // Operador de caixa
  ADMIN       // Administrador
  OWNER       // Proprietário
}

enum CategoryType {
  REVENUE
  EXPENSE
  BOTH
  PRODUCT     // Para categorias de produtos
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
  CHECK
}

enum MovementType {
  IN          // Entrada no estoque
  OUT         // Saída do estoque
  ADJUSTMENT  // Ajuste de estoque
}

enum TaskStatus {
  PENDING     // Pendente
  IN_PROGRESS // Em andamento
  COMPLETED   // Finalizada
  CANCELLED   // Cancelada
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}